{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","App.js","index.js"],"names":["services_notes","axios","get","then","res","data","newObject","post","id","put","concat","Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","notesToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","updatedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","target","type","App_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.48c7b657.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const req = axios.get(baseUrl);\n\n  return req.then(res => res.data);\n}\n\nconst create = newObject => {\n  const req = axios.post(baseUrl, newObject);\n  return req.then(res => res.data);\n}\n\nconst update = (id, newObject) => {\n  const req = axios.put(`${baseUrl}/${id}`, newObject);\n  return req.then(res => res.data);\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (!message) {\n    return null;\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  );\n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(notes => {\n        setNotes(notes);\n      });\n  }, []);\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important);\n\n  const addNote = (event) => {\n    event.preventDefault();\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService\n      .create(noteObject)\n      .then(newNote => {\n        setNotes(notes.concat(newNote));\n        setNewNote('');\n      });\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = {\n      ...note,\n      important: !note.important\n    };\n\n    noteService\n      .update(id, changedNote)\n      .then(updatedNote => {\n        setNotes(notes.map(note => {\n          return note.id !== id ? note : updatedNote\n        }))\n      })\n      .catch(err => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from server`\n        );\n\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n\n        setNotes(notes.filter(n => n.id !== id));\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {\n          notesToShow.map(note => {\n            return (\n              <Note\n                key={note.id}\n                note={note}\n                toggleImportance={() => toggleImportanceOf(note.id)}\n              />\n            )\n          })\n        }\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type='submit'>save</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}